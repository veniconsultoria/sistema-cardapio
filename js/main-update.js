// main-updated.js - Sistema principal REFATORADO (SEM DUPLICA√á√ïES)

console.log('üìÅ Carregando main.js refatorado...');

// ===== IMPORTA√á√ïES DOS M√ìDULOS =====
// Nota: Em produ√ß√£o, use import est√°tico ou dynamic imports
// Por compatibilidade com HTML atual, carregamos via script tags

// Verificar se m√≥dulos foram carregados
function verificarModulos() {
    const modulosNecessarios = ['Utils', 'Toast'];
    const modulosFaltando = modulosNecessarios.filter(modulo => !window[modulo]);
    
    if (modulosFaltando.length > 0) {
        console.warn('‚ö†Ô∏è M√≥dulos n√£o carregados:', modulosFaltando);
        console.log('üí° Certifique-se de carregar utils.js e toast.js antes do main.js');
    } else {
        console.log('‚úÖ Todos os m√≥dulos carregados');
    }
}

// Verificar m√≥dulos quando carregado
setTimeout(verificarModulos, 100);

// ===== VARI√ÅVEIS GLOBAIS SIMPLIFICADAS =====
let mainCardapios = {};

// Data atual para calend√°rio
let dataAtual = new Date();
let mesAtual = dataAtual.getMonth();
let anoAtual = dataAtual.getFullYear();
let diaSelecionado = null;
let calendarioVisivel = true;

// ===== INICIALIZA√á√ÉO PRINCIPAL LIMPA =====
document.addEventListener('DOMContentLoaded', function() {
    console.log('üìÑ DOM carregado - main.js refatorado');
    inicializarSistemaMain();
});

function inicializarSistemaMain() {
    console.log('üöÄ Inicializando sistema principal...');
    
    // Configurar eventos b√°sicos (sem duplicar utilit√°rios)
    configurarEventosMain();
    
    // Configurar data atual usando utilit√°rio
    const inputData = document.getElementById('dataCardapio');
    if (inputData && window.Utils) {
        inputData.value = Utils.obterDataHoje();
    } else if (inputData) {
        inputData.value = new Date().toISOString().split('T')[0];
    }
    
    console.log('‚úÖ Sistema principal inicializado');
}

function configurarEventosMain() {
    console.log('‚öôÔ∏è Configurando eventos principais...');
    
    // ===== FORMATA√á√ÉO DE TELEFONE (usando m√≥dulo Utils) =====
    const telefoneInput = document.getElementById('telefoneCliente');
    if (telefoneInput) {
        telefoneInput.addEventListener('input', function(e) {
            if (window.Utils) {
                // Usar m√≥dulo utilit√°rio
                e.target.value = Utils.formatarTelefone(e.target.value);
            } else {
                // Fallback simples se m√≥dulo n√£o carregou
                let value = e.target.value.replace(/\D/g, '');
                if (value.length <= 11) {
                    value = value.replace(/^(\d{2})(\d{5})(\d{4})$/, '($1)$2-$3');
                    value = value.replace(/^(\d{2})(\d{4})(\d{4})$/, '($1)$2-$3');
                    value = value.replace(/^(\d{2})(\d{1,5})$/, '($1)$2');
                    value = value.replace(/^(\d{1,2})$/, '($1');
                }
                e.target.value = value;
            }
        });
    }

    console.log('‚úÖ Eventos principais configurados');
}

// ===== FUN√á√ïES DE CALEND√ÅRIO ESPEC√çFICAS =====

function toggleCalendar() {
    const calendarContainer = document.getElementById('calendarContainer');
    const toggleText = document.getElementById('calendar-toggle-text');
    
    if (!calendarContainer || !toggleText) {
        console.warn('‚ö†Ô∏è Elementos do calend√°rio n√£o encontrados');
        return;
    }
    
    if (calendarioVisivel) {
        calendarContainer.classList.add('hidden');
        toggleText.textContent = 'Mostrar Calend√°rio';
        calendarioVisivel = false;
    } else {
        calendarContainer.classList.remove('hidden');
        toggleText.textContent = 'Ocultar Calend√°rio';
        calendarioVisivel = true;
    }
}

function carregarCalendario() {
    const hoje = new Date();
    const dataInput = document.getElementById('dataCardapio');
    if (dataInput) {
        dataInput.value = hoje.toISOString().split('T')[0];
    }
    
    // Inicializar vari√°veis do calend√°rio
    dataAtual = hoje;
    mesAtual = hoje.getMonth();
    anoAtual = hoje.getFullYear();
    
    atualizarCalendario();
}

function atualizarCalendario() {
    const mesAnoElement = document.getElementById('mesAno');
    const gridElement = document.getElementById('calendarGrid');
    
    if (!mesAnoElement || !gridElement) {
        console.warn('‚ö†Ô∏è Elementos do calend√°rio n√£o encontrados');
        return;
    }
    
    const meses = ['Janeiro', 'Fevereiro', 'Mar√ßo', 'Abril', 'Maio', 'Junho',
                  'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'];
    
    mesAnoElement.textContent = `${meses[mesAtual]} ${anoAtual}`;
    
    // Limpar grid
    gridElement.innerHTML = '';
    
    // Dias da semana
    const diasSemana = ['Dom', 'Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'Sab'];
    diasSemana.forEach(dia => {
        const div = document.createElement('div');
        div.className = 'calendar-day';
        div.style.fontWeight = 'bold';
        div.textContent = dia;
        gridElement.appendChild(div);
    });
    
    // Primeiro dia do m√™s
    const primeiroDia = new Date(anoAtual, mesAtual, 1).getDay();
    const diasNoMes = new Date(anoAtual, mesAtual + 1, 0).getDate();
    
    // Espa√ßos vazios antes do primeiro dia
    for (let i = 0; i < primeiroDia; i++) {
        const div = document.createElement('div');
        div.className = 'calendar-day';
        gridElement.appendChild(div);
    }
    
    // Dias do m√™s
    for (let dia = 1; dia <= diasNoMes; dia++) {
        const div = document.createElement('div');
        div.className = 'calendar-day';
        div.textContent = dia;
        
        const dataStr = `${anoAtual}-${(mesAtual + 1).toString().padStart(2, '0')}-${dia.toString().padStart(2, '0')}`;
        
        // Verificar se tem card√°pio
        if (mainCardapios[dataStr]) {
            div.classList.add('has-menu');
        }
        
        // Verificar se √© o dia selecionado
        const dataInput = document.getElementById('dataCardapio');
        if (dataInput && dataInput.value === dataStr) {
            div.classList.add('active');
        }
        
        div.onclick = () => selecionarDia(dataStr);
        gridElement.appendChild(div);
    }
}

function selecionarDia(data) {
    const dataInput = document.getElementById('dataCardapio');
    if (dataInput) {
        dataInput.value = data;
    }
    diaSelecionado = data;
    atualizarCalendario();
    if (typeof carregarCardapioData === 'function') {
        carregarCardapioData();
    }
}

function mudarMes(direcao) {
    mesAtual += direcao;
    if (mesAtual < 0) {
        mesAtual = 11;
        anoAtual--;
    } else if (mesAtual > 11) {
        mesAtual = 0;
        anoAtual++;
    }
    atualizarCalendario();
}

// ===== FUN√á√ÉO SHOW TAB MELHORADA =====
function showTab(tabName) {
    console.log('üìÇ Navegando para aba:', tabName);
    
    // Ocultar todas as abas
    document.querySelectorAll('.tab-content').forEach(tab => {
        tab.classList.add('hidden');
    });
    
    // Remover active de todos os bot√µes
    document.querySelectorAll('.tab').forEach(tab => {
        tab.classList.remove('active');
    });
    
    // Mostrar aba selecionada
    const tabContent = document.getElementById(tabName);
    if (tabContent) {
        tabContent.classList.remove('hidden');
    }
    
    // Marcar bot√£o como ativo
    if (event && event.target) {
        event.target.classList.add('active');
    } else {
        // Se n√£o h√° event (chamada program√°tica), encontrar o bot√£o correspondente
        const botaoTab = document.querySelector(`.tab[onclick*="${tabName}"]`);
        if (botaoTab) {
            botaoTab.classList.add('active');
        }
    }
    
    // ===== INICIALIZA√á√ÉO DE M√ìDULOS ESPEC√çFICOS =====
    setTimeout(() => {
        switch(tabName) {
            case 'produtos-novo':
                console.log('üõí Inicializando produtos...');
                if (typeof inicializarProdutosNovo === 'function') {
                    inicializarProdutosNovo();
                } else if (typeof inicializarProdutos === 'function') {
                    inicializarProdutos();
                }
                break;
                
            case 'receitas':
                console.log('üçΩÔ∏è Inicializando receitas...');
                if (typeof inicializarReceitas === 'function') {
                    inicializarReceitas();
                }
                break;
                
            case 'tipos-refeicoes':
                console.log('üçΩÔ∏è Inicializando tipos de refei√ß√µes...');
                if (typeof inicializarTiposRefeicoes === 'function') {
                    inicializarTiposRefeicoes();
                }
                break;
                
            case 'clientes':
                console.log('üë• Inicializando clientes...');
                if (typeof inicializarClientes === 'function') {
                    inicializarClientes().then(() => {
                        console.log('‚úÖ Clientes inicializados');
                        if (window.Toast) {
                            Toast.info('Sistema de clientes carregado');
                        }
                    }).catch(error => {
                        console.error('‚ùå Erro ao inicializar clientes:', error);
                        if (window.Toast) {
                            Toast.erro('Erro ao inicializar clientes: ' + error.message);
                        }
                    });
                } else {
                    console.warn('‚ö†Ô∏è Fun√ß√£o inicializarClientes n√£o encontrada');
                    if (window.Toast) {
                        Toast.aviso('Sistema de clientes n√£o dispon√≠vel');
                    }
                }
                break;
                
            case 'cardapio':
                console.log('üìÖ Inicializando card√°pio...');
                if (typeof inicializarCardapio === 'function') {
                    inicializarCardapio();
                } else if (typeof inicializarSistemaSeguro === 'function') {
                    inicializarSistemaSeguro();
                }
                break;
                
            default:
                console.log('‚ÑπÔ∏è Aba sem inicializa√ß√£o espec√≠fica:', tabName);
        }
    }, 300);
}

// ===== FUN√á√ïES AUXILIARES LIMPAS =====

function fecharModal(modalId) {
    const modal = document.getElementById(modalId);
    if (modal) {
        modal.style.display = 'none';
    }
}

// ===== EVENTOS GLOBAIS =====

// Fechar modais ao clicar fora
window.onclick = function(event) {
    if (event.target.classList.contains('modal')) {
        event.target.style.display = 'none';
    }
}

// ===== EXPORTAR FUN√á√ïES PARA USO GLOBAL =====
window.fecharModal = fecharModal;
window.toggleCalendar = toggleCalendar;
window.mudarMes = mudarMes;
window.selecionarDia = selecionarDia;
window.showTab = showTab;
window.carregarCalendario = carregarCalendario;
window.atualizarCalendario = atualizarCalendario;

// ===== FUN√á√ïES DE COMPATIBILIDADE =====

// Fun√ß√£o auxiliar para verificar se m√≥dulos est√£o carregados
function verificarModulosCarregados() {
    console.log('üîç === VERIFICA√á√ÉO DOS M√ìDULOS ===');
    console.log('üõí Produtos:', typeof inicializarProdutosNovo);
    console.log('üçΩÔ∏è Receitas:', typeof inicializarReceitas);
    console.log('üçΩÔ∏è Tipos:', typeof inicializarTiposRefeicoes);
    console.log('üë• Clientes:', typeof inicializarClientes);
    console.log('üìÖ Card√°pio:', typeof inicializarCardapio);
    console.log('üîß Utils:', typeof window.Utils);
    console.log('üçû Toast:', typeof window.Toast);
}

// ===== FUN√á√ÉO DE TESTE DO SISTEMA =====
window.testarSistemaCompleto = function() {
    console.log('üß™ === TESTE COMPLETO DO SISTEMA REFATORADO ===');
    
    // Verificar m√≥dulos
    verificarModulosCarregados();
    
    // Verificar elementos DOM principais
    console.log('üéØ Elementos DOM principais:');
    console.log('  - Container:', !!document.querySelector('.container'));
    console.log('  - Tabs:', document.querySelectorAll('.tab').length);
    console.log('  - Tab contents:', document.querySelectorAll('.tab-content').length);
    
    // Verificar cada aba espec√≠fica
    console.log('üìã Elementos por aba:');
    console.log('  - Produtos tbody:', !!document.getElementById('produtos-tbody'));
    console.log('  - Receitas form:', !!document.getElementById('formReceita'));
    console.log('  - Tipos tbody:', !!document.getElementById('tipos-tbody'));
    console.log('  - Clientes tbody:', !!document.getElementById('clientes-tbody'));
    console.log('  - Card√°pio container:', !!document.getElementById('tiposRefeicaoCardapio'));
    
    // Testar m√≥dulos carregados
    console.log('üì¨ Testando m√≥dulos...');
    if (window.Toast) {
        Toast.sucesso('Sistema principal testado com sucesso!');
        Toast.info('M√≥dulos carregados corretamente');
    } else {
        alert('‚úÖ Sistema testado - Toast n√£o dispon√≠vel');
    }
    
    if (window.Utils) {
        console.log('üìÖ Data formatada:', Utils.formatarDataBrasil('2024-12-25'));
        console.log('üí∞ Moeda formatada:', Utils.formatarMoeda(1234.56));
    }
    
    console.log('‚úÖ Teste completo finalizado!');
};

// Disponibilizar fun√ß√£o de verifica√ß√£o
window.verificarModulosCarregados = verificarModulosCarregados;

// ===== VERIFICA√á√ÉO FINAL AO CARREGAR =====
document.addEventListener('DOMContentLoaded', function() {
    console.log('üìÑ DOM carregado - verificando sistema refatorado...');
    
    setTimeout(() => {
        console.log('üîç === VERIFICA√á√ÉO DO SISTEMA REFATORADO ===');
        console.log('üìã Fun√ß√µes principais dispon√≠veis:');
        console.log('  - showTab:', typeof window.showTab);
        console.log('  - toggleCalendar:', typeof window.toggleCalendar);
        console.log('  - mudarMes:', typeof window.mudarMes);
        console.log('  - selecionarDia:', typeof window.selecionarDia);
        console.log('  - Utils:', typeof window.Utils);
        console.log('  - Toast:', typeof window.Toast);
        
        console.log('üéØ Elementos DOM encontrados:');
        console.log('  - Container principal:', !!document.querySelector('.container'));
        console.log('  - Calend√°rio:', !!document.getElementById('calendarContainer'));
        console.log('  - Bot√µes de tab:', document.querySelectorAll('.tab').length);
        
        if (window.Toast) {
            Toast.sucesso('Sistema principal refatorado carregado!', 2000);
        }
        
        console.log('‚úÖ Sistema principal refatorado e funcionando!');
    }, 1000);
});

console.log('‚úÖ main.js REFATORADO carregado com sucesso!');
console.log('üìã M√≥dulos necess√°rios: utils.js, toast.js');
console.log('üß™ Para testar: testarSistemaCompleto()');