// js/auth.js
// Sistema de autentica√ß√£o

console.log('üìÅ Carregando auth.js...');

// Aguardar Supabase estar dispon√≠vel
function aguardarSupabase(callback, tentativas = 0) {
    if (window.supabase && window.supabase.auth) {
        console.log('‚úÖ Supabase dispon√≠vel para auth.js');
        callback();
    } else if (tentativas < 50) { // 5 segundos m√°ximo
        setTimeout(() => aguardarSupabase(callback, tentativas + 1), 100);
    } else {
        console.error('‚ùå Timeout: Supabase n√£o ficou dispon√≠vel');
        alert('Erro: N√£o foi poss√≠vel conectar com o Supabase. Verifique sua conex√£o.');
    }
}

// Fun√ß√£o de login
async function login() {
    console.log('üîê Tentando fazer login...');
    
    aguardarSupabase(async () => {
        const email = document.getElementById('email').value.trim();
        const password = document.getElementById('password').value;
        const loginBtn = document.getElementById('login-btn');
        
        // Valida√ß√µes
        if (!email || !password) {
            mostrarErro('Por favor, preencha todos os campos');
            return;
        }
        
        // Desabilitar bot√£o
        loginBtn.textContent = 'Entrando...';
        loginBtn.disabled = true;
        
        try {
            const { data, error } = await window.supabase.auth.signInWithPassword({
                email: email,
                password: password
            });
            
            if (error) {
                throw error;
            }
            
            console.log('‚úÖ Login realizado:', data.user.email);
            mostrarSucesso('Login realizado com sucesso! Redirecionando...');
            
            // Redirecionar ap√≥s 1 segundo
            setTimeout(() => {
                window.location.href = 'index.html';
            }, 1000);
            
        } catch (error) {
            console.error('‚ùå Erro no login:', error);
            mostrarErro('Erro no login: ' + error.message);
        } finally {
            // Reabilitar bot√£o
            loginBtn.textContent = 'Entrar';
            loginBtn.disabled = false;
        }
    });
}

// Fun√ß√£o de registro
async function register() {
    console.log('üìù Tentando fazer registro...');
    
    aguardarSupabase(async () => {
        const email = document.getElementById('email').value.trim();
        const password = document.getElementById('password').value;
        const confirmPassword = document.getElementById('confirm-password').value;
        
        // Valida√ß√µes
        if (!email || !password || !confirmPassword) {
            mostrarErro('Por favor, preencha todos os campos');
            return;
        }
        
        if (password !== confirmPassword) {
            mostrarErro('As senhas n√£o coincidem');
            return;
        }
        
        if (password.length < 6) {
            mostrarErro('A senha deve ter pelo menos 6 caracteres');
            return;
        }
        
        try {
            const { data, error } = await window.supabase.auth.signUp({
                email: email,
                password: password
            });
            
            if (error) {
                throw error;
            }
            
            console.log('‚úÖ Registro realizado:', data.user?.email);
            mostrarSucesso('Usu√°rio registrado com sucesso! Redirecionando para login...');
            
            // Redirecionar ap√≥s 2 segundos
            setTimeout(() => {
                window.location.href = 'login.html';
            }, 2000);
            
        } catch (error) {
            console.error('‚ùå Erro no registro:', error);
            mostrarErro('Erro no registro: ' + error.message);
        }
    });
}

// Fun√ß√£o para logout
async function logout() {
    aguardarSupabase(async () => {
        try {
            const { error } = await window.supabase.auth.signOut();
            if (error) throw error;
            
            console.log('‚úÖ Logout realizado');
            window.location.href = 'login.html';
        } catch (error) {
            console.error('‚ùå Erro no logout:', error);
            alert('Erro no logout: ' + error.message);
        }
    });
}

// Fun√ß√£o para mostrar UUID (debug)
async function mostrarUUID() {
    console.log('üîç Buscando UUID do usu√°rio...');
    
    aguardarSupabase(async () => {
        try {
            const { data: { user }, error } = await window.supabase.auth.getUser();
            
            if (error) throw error;
            
            if (user) {
                console.log('üë§ Usu√°rio encontrado:');
                console.log('UUID:', user.id);
                console.log('Email:', user.email);
                
                alert(`‚úÖ USU√ÅRIO LOGADO!\n\nUUID: ${user.id}\nEmail: ${user.email}\n\nüìã Copie este UUID para usar no teste SQL do Supabase!`);
                
                // Testar fun√ß√£o RPC se existir
                try {
                    const { data, error: rpcError } = await window.supabase.rpc('get_next_produto_codigo', {
                        user_uuid: user.id
                    });
                    
                    if (rpcError) {
                        console.error('‚ö†Ô∏è Fun√ß√£o RPC n√£o encontrada ou erro:', rpcError);
                        alert('‚ö†Ô∏è Fun√ß√£o get_next_produto_codigo ainda n√£o foi criada no Supabase.\n\nV√° para SQL Editor e execute a fun√ß√£o que foi enviada.');
                    } else {
                        console.log('‚úÖ Fun√ß√£o RPC OK! Pr√≥ximo c√≥digo:', data);
                        alert(`‚úÖ FUN√á√ÉO RPC FUNCIONANDO!\n\nPr√≥ximo c√≥digo de produto: ${data}`);
                    }
                } catch (rpcError) {
                    console.error('‚ö†Ô∏è Erro ao testar RPC:', rpcError);
                }
                
            } else {
                console.log('‚ùå Usu√°rio n√£o est√° logado');
                alert('‚ùå Usu√°rio n√£o est√° logado!\n\nFa√ßa login primeiro.');
            }
        } catch (error) {
            console.error('‚ùå Erro ao buscar usu√°rio:', error);
            alert('‚ùå Erro: ' + error.message);
        }
    });
}

// Verificar autentica√ß√£o ao carregar p√°gina
document.addEventListener('DOMContentLoaded', function() {
    console.log('üìÑ P√°gina carregada, verificando autentica√ß√£o...');
    
    const isLoginPage = window.location.pathname.includes('login.html');
    const isRegisterPage = window.location.pathname.includes('register.html');
    
    if (!isLoginPage && !isRegisterPage) {
        // P√°gina que precisa de autentica√ß√£o
        aguardarSupabase(async () => {
            const { data: { user } } = await window.supabase.auth.getUser();
            if (!user) {
                console.log('üö´ Usu√°rio n√£o autenticado, redirecionando...');
                window.location.href = 'login.html';
            } else {
                console.log('‚úÖ Usu√°rio autenticado:', user.email);
            }
        });
    }
});

// Fun√ß√µes auxiliares para mostrar mensagens
function mostrarErro(mensagem) {
    const errorDiv = document.getElementById('error-message');
    const successDiv = document.getElementById('success-message');
    
    if (errorDiv) {
        errorDiv.textContent = mensagem;
        errorDiv.style.display = 'block';
    } else {
        alert('Erro: ' + mensagem);
    }
    
    if (successDiv) {
        successDiv.style.display = 'none';
    }
}

function mostrarSucesso(mensagem) {
    const errorDiv = document.getElementById('error-message');
    const successDiv = document.getElementById('success-message');
    
    if (successDiv) {
        successDiv.textContent = mensagem;
        successDiv.style.display = 'block';
    } else {
        alert(mensagem);
    }
    
    if (errorDiv) {
        errorDiv.style.display = 'none';
    }
}

// Exportar fun√ß√µes para uso global
window.login = login;
window.register = register;
window.logout = logout;
window.mostrarUUID = mostrarUUID;

console.log('‚úÖ auth.js carregado com sucesso!');